---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: kafka
  labels:
    app: kafka
spec:
  selector:
    app: kafka
  ports:
    - name: http0
      protocol: TCP
      port: 920
      targetPort: 920
    - name: http1
      protocol: TCP
      port: 921
      targetPort: 921
    - name: http2
      protocol: TCP
      port: 922
      targetPort: 922
    - name: https0
      protocol: TCP
      port: 940
      targetPort: 940
    - name: https1
      protocol: TCP
      port: 941
      targetPort: 941
    - name: https2
      protocol: TCP
      port: 942
      targetPort: 942
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: kafka-pdb
  namespace: kafka
spec:
  selector:
    matchLabels:
      app: kafka
  maxUnavailable: 1
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: kafka
spec:
  replicas: 3
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      volumes:
        - name: secrets
          secret:
            secretName: "kafka-store"
            items:
              - key: kafka.keystore.jks
                path: kafka.keystore.jks
              - key: kafka.truststore.jks
                path: kafka.truststore.jks
              - key: key-creds
                path: key-creds
              - key: truststore-creds
                path: truststore-creds
              - key: keystore-creds
                path: keystore-creds         
      initContainers:
      - name: look-for-zookeeper-service
        image: ubuntu:latest
        command: ['sh', '-c', 'until getent hosts zookeeper-service.kafka.svc.cluster.local; do echo waiting for zookeeper; sleep 2; done;']    
      containers:
      - name: kafka
        volumeMounts:
          - name: secrets
            mountPath: /opt/kafka/config/certs
            readOnly: true 
        image: ubuntu/kafka:edge
        env:
          - name: ZOOKEEPER_HOST
            value: zookeeper-service.kafka.svc.cluster.local
        args: ["/etc/kafka/server.properties", "--override", "inter.broker.listener.name=PLAINTEXT", "--override", "ssl.keystore.location=/opt/kafka/config/certs/kafka.keystore.jks", "--override", "ssl.keystore.password=password", "--override", "ssl.key.password=password", "--override", "ssl.truststore.location=/opt/kafka/config/certs/kafka.truststore.jks", "--override", "ssl.truststore.password=password", "--override", "ssl.enabled.protocols=TLSv1.2,TLSv1.1,TLSv1", "--override", "ssl.client.auth=required"]
        ports:
        - containerPort: 920
          name: http0
          protocol: TCP
        - containerPort: 921
          name: http1
          protocol: TCP
        - containerPort: 922
          name: http2
          protocol: TCP                    
        - containerPort: 940
          name: https0
          protocol: TCP
        - containerPort: 941
          name: https1
          protocol: TCP
        - containerPort: 942
          name: https2
          protocol: TCP          
        lifecycle:
          postStart:
            exec:
              command: ["bash", "-c", "Y=$(echo ${HOSTNAME} | awk -F '-' '{print $2}') ; echo \"broker.id=${Y}\" >> /etc/kafka/server.properties;echo \"listeners=PLAINTEXT://:92${Y},SSL://:94${Y}\" >> /etc/kafka/server.properties;echo \"advertised.listeners=SSL://${INGRESS_IP}:94${Y}, PLAINTEXT://kafka-service.kafka.svc.cluster.local:92${Y}\" >> /etc/kafka/server.properties"]    
---
apiVersion: v1
kind: Service
metadata:
  name:  zookeeper-headless-service
  namespace: kafka
  labels:
    app: zookeeper
spec:
  ports:
  - port: 2888
    name: server
  - port: 3888
    name: leader-election
  clusterIP: None
  selector:
    app: zookeeper
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
  namespace: kafka
  labels:
    app: zookeeper
spec:
  ports:
  - port: 2181
    name: client
  selector:
    app: zookeeper
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: zookeeper-pdb
  namespace: kafka
spec:
  selector:
    matchLabels:
      app: zookeeper
  maxUnavailable: 1
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: kafka
spec:
  selector:
    matchLabels:
      app: zookeeper
  serviceName:  zookeeper-headless-service
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - zookeeper
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: kubernetes-zookeeper
        imagePullPolicy: Always
        image: "registry.k8s.io/kubernetes-zookeeper:1.0-3.4.10"
        resources:
          requests:
            memory: "1Gi"
            cpu: "0.5"
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        command:
        - sh
        - -c
        - "start-zookeeper \
          --servers=3 \
          --data_dir=/var/lib/zookeeper/data \
          --data_log_dir=/var/lib/zookeeper/data/log \
          --conf_dir=/opt/zookeeper/conf \
          --client_port=2181 \
          --election_port=3888 \
          --server_port=2888 \
          --tick_time=2000 \
          --init_limit=10 \
          --sync_limit=5 \
          --heap=512M \
          --max_client_cnxns=60 \
          --snap_retain_count=3 \
          --purge_interval=12 \
          --max_session_timeout=40000 \
          --min_session_timeout=4000 \
          --log_level=INFO"
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "zookeeper-ready 2181"
          initialDelaySeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "zookeeper-ready 2181"
          initialDelaySeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/zookeeper
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
 
