---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: kafka
  labels:
    app: kafka
spec:
  selector:
    app: kafka
  ports:
    - name: http0
      protocol: TCP
      port: 920
      targetPort: 920
    - name: http1
      protocol: TCP
      port: 921
      targetPort: 921
    - name: http2
      protocol: TCP
      port: 922
      targetPort: 922
    - name: https0
      protocol: TCP
      port: 940
      targetPort: 940
    - name: https1
      protocol: TCP
      port: 941
      targetPort: 941
    - name: https2
      protocol: TCP
      port: 942
      targetPort: 942

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      volumes:
        - name: secrets
          secret:
            secretName: "kafka-store"
            items:
              - key: kafka.keystore.jks
                path: kafka.keystore.jks
              - key: kafka.truststore.jks
                path: kafka.truststore.jks
              - key: key-creds
                path: key-creds
              - key: truststore-creds
                path: truststore-creds
              - key: keystore-creds
                path: keystore-creds         
      initContainers:
      - name: look-for-zookeeper-service
        image: ubuntu:latest
        command: ['sh', '-c', 'until getent hosts zookeeper-service.kafka.svc.cluster.local; do echo waiting for zookeeper; sleep 2; done;']    
      containers:
      - name: kafka
        volumeMounts:
          - name: secrets
            mountPath: /opt/kafka/config/certs
            readOnly: true 
        image: ubuntu/kafka:edge
        env:
          - name: ZOOKEEPER_HOST
            value: zookeeper-service.kafka.svc.cluster.local
        args: ["/etc/kafka/server.properties", "--override", "inter.broker.listener.name=PLAINTEXT", "--override", "ssl.keystore.location=/opt/kafka/config/certs/kafka.keystore.jks", "--override", "ssl.keystore.password=password", "--override", "ssl.key.password=password", "--override", "ssl.truststore.location=/opt/kafka/config/certs/kafka.truststore.jks", "--override", "ssl.truststore.password=password", "--override", "ssl.enabled.protocols=TLSv1.2,TLSv1.1,TLSv1", "--override", "ssl.client.auth=required"]
        ports:
        - containerPort: 920
          name: http0
          protocol: TCP
        - containerPort: 921
          name: http1
          protocol: TCP
        - containerPort: 922
          name: http2
          protocol: TCP                    
        - containerPort: 940
          name: https0
          protocol: TCP
        - containerPort: 941
          name: https1
          protocol: TCP
        - containerPort: 942
          name: https2
          protocol: TCP          
        lifecycle:
          postStart:
            exec:
              command: ["bash", "-c", "Y=$(echo ${HOSTNAME} | awk -F '-' '{print $2}') ; echo \"broker.id=${Y}\" >> /etc/kafka/server.properties;echo \"listeners=PLAINTEXT://:92${Y},SSL://:94${Y}\" >> /etc/kafka/server.properties;echo \"advertised.listeners=SSL://20.10.243.124:94${Y}, PLAINTEXT://kafka-service.kafka.svc.cluster.local:92${Y}\" >> /etc/kafka/server.properties"]    
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
  namespace: kafka
  labels:
    app: zookeeper
spec:
  ports:
  - port: 2181
  selector:
    app: zookeeper
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper-deployment
  namespace: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: ubuntu/zookeeper:edge
        ports:
        - containerPort: 2181
          name: zookeeper
          protocol: TCP
 
